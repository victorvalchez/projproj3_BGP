./router <asn> <port-ip.add.re.ss-[peer,prov,cust]> [port-ip.add.re.ss-[peer,prov,cust]] ...[port-ip.add.re.ss-[peer,prov,cust]]

example:
./router 7 7833-1.2.3.2-cust 2374-192.168.0.2-peer 1293-67.32.9.2-prov
--------------------------------

The simulator can be executed using either of the following commands:
user@host$ ./run configs/<config-file>
This will run a single test of your choice from the "configs/" directory.

--------------------------------

All messages will have the same basic form:

{
  "src":  "<source IP>",
  "dst":  "<destination IP>",
  "type": "<update|withdraw|data|no route|dump|table|handshake>",                   
  "msg":  {...}
}

-----------------------------------------------
ROUTE ANNOUNCEMENTS (Update messages)
(1) save a copy of the announcement in case you need it later
(2) add an entry to your forwarding table
(3) potentially send copies of the announcement to neighboring routers.
    Your announcement should only include the network, netmask, and ASPath.
You should update:
    Update received from a customer: send updates to all other neighbors
    Update received from a peer or a provider: only send updates to your customers




{
  "src":  "<source IP>",        # Example: 172.65.0.2
  "dst":  "<destination IP>",   # Example: 172.65.0.1  Notice the final one, this will typically be the IP address of your router
  "type": "update",                   
  "msg": 
  {
    "network":    "<network prefix>",           # Example: 12.0.0.0
    "netmask":    "<associated subnet netmask>",# Example: 255.0.0.0
    "localpref":  "<integer>",                  # Example: 100
    "selfOrigin": "<true|false>",
    "ASPath":     "{<nid>, [nid], ...}",        # Examples: [1] or [3, 4] or [1, 4, 3]
    "origin":     "<IGP|EGP|UNK>",                    
  }
}

This update is telling us:
(1) The src of the message (172.65.0.2) knows how to forward data packets to the 
 - network & netmask: 12.0.0.0/8 
	 - netwask 255.0.0.0 -> /8
	 - netwask 255.255.0.0 -> /16
	 ... The /x tells us how many bits are part of the network address

 - localpref: “weight” assigned to this route, where higher weights are better.
 - selfOrigin: describes whether this route was added by the local administrator (true) or not (false).
   “true” routes are preferred
 - ASPath: list of Autonomous Systems that the packets along this route will traverse. 
   Preference is given to routes with shorter ASPaths
 - origin: describes whether this route originated from a router within the local AS (IGP), a remote AS (EGP), or an unknown origin (UNK). 
   Preference order is IGP > EGP > UNK. Important for breaking ties.

In the future we should use this neighbor to send forward packets to 12.x.x.x destinations

-----------------------------------------------
DATA MESSAGES
Use our forwarding table to deliver a data message to their final destination
WE DO NOT CARE ABOUT CONTENT OF msg

{
  "src":  "<source IP>",        # Example: 134.0.88.77
  "dst":  "<destination IP>",   # Example: 12.4.66.13
  "type": "data",                   
  "msg":  "<some data>"
}

Possible answers:
If I don't have a route, return a "no route" message back to the source
{
  "src":  "<source IP>",        # Example: 172.65.0.1, i.e., the router's IP on the given port
  "dst":  "<destination IP>",   # Example: 134.0.88.77
  "type": "no route",                   
  "msg":  {}
}

If I have exactly one route, just pass the message 
{
  "src":  "<source IP>",        # Example: 172.65.0.1, i.e., the router's IP on the given port
  "dst":  "<destination IP>",   # Example: 134.0.88.77
  "type": "data",                   
  "msg":  {}
}

If I have multiple possible destinations in my forwarding table

------------------------------------------------------------
DUMP and TABLE MESSAGES
When your router receives a “dump” message, it must respond with a “table” message that contains
a copy of the current routing announcement cache in your router.

{
  "src":  "<source IP>",        # Example: 72.65.0.1, i.e., your router
  "dst":  "<destination IP>",   # Example: 72.65.0.2, i.e., the neighboring router
  "type": "table",                   
  "msg":
  [
    {"network" : "<network.in.quad.notation>", "netmask" : "<netmask.in.quad.notation>", "peer" : "<peer-ip.in.quad.notation>", "localpref": pref, "ASPath": [path, of, ASes], "selfOrigin": trueorfalse, "origin": "EGP-IGP-UNK" },
    {"network" : "<network.in.quad.notation>", "netmask" : "<netmask.in.quad.notation>", "peer" : "<peer-ip.in.quad.notation>"}, "localpref": pref, "ASPath": [path, of, ASes], "selfOrigin": trueorfalse, "origin": "EGP-IGP-UNK",
    ...
  ]
}



************************************************
table_original = 
{49702: [{'network': '192.168.1.0', 'netmask': '255.255.255.0', 'localpref': 100, 'ASPath': [1], 'origin': 'EGP', 'selfOrigin': True, 'peer': '192.168.0.2'}],
 49703: [{'network': '172.169.0.0', 'netmask': '255.255.0.0', 'localpref': 100, 'ASPath': [2], 'origin': 'EGP', 'selfOrigin': True, 'peer': '172.168.0.2'}],
 49704: [{'network': '11.0.0.0', 'netmask': '255.0.0.0', 'localpref': 100, 'ASPath': [3], 'origin': 'EGP', 'selfOrigin': True, 'peer': '10.0.0.2'}]}


