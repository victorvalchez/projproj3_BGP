#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math
from http import server


class Router:
    relations = {}
    sockets = {}
    ports = {}

    table_original = {}
    table_aggregation = {}
    ports_original = {}

    def __init__(self, asn, connections):
        print("Router at AS %s starting up" % asn)

        self.asn = asn
        for relationship in connections:
            # Neighbor == IP that ends with .2
            port, neighbor, relation = relationship.split("-")

            self.sockets[neighbor] = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sockets[neighbor].bind(('localhost', 0))

            self.ports[neighbor] = int(port)
            self.ports_original[int(port)] = neighbor

            self.relations[neighbor] = relation
            self.send(neighbor,
                      json.dumps({"type": "handshake", "src": self.our_addr(neighbor), "dst": neighbor, "msg": {}}))

            self.table_original[int(port)] = [] 
            

    def our_addr(self, dst):
        """Router IP address, takes the destination and changes the final 2 with a 1"""
        quads = list(int(qdn) for qdn in dst.split('.'))
        quads[3] = 1
        return "%d.%d.%d.%d" % (quads[0], quads[1], quads[2], quads[3])

    def send(self, network, message):
        self.sockets[network].sendto(message.encode('utf-8'), ('localhost', self.ports[network]))
        # I guess network is an index of the neighbor we want to send it to

    def update(self, msg_dic):
        ##########
        # Save a copy of the announcement
        ##########
        #update table_original

        ##########
        # update forwarding table
        ##########

        port = self.ports[msg_dic['src']]

        self.table_original[port].append(msg_dic['msg'])

        #add peer information
        self.table_original[port][-1]['peer'] = msg_dic['src']

        ##########
        # send copies of the announcement
        ##########
        for ip in self.relations:
            if ip != msg_dic['src']:  # Not updating the neighbor that has sent me the update
                # updating the neighbours depends on the relations
                if self.relations[msg_dic['src']] == 'cust' or self.relations[ip] == 'cust':
                    self.send(ip,
                              json.dumps({"type": "update",
                                          "src": self.our_addr(ip),
                                          "dst": ip,
                                          "msg": {
                                              "network": msg_dic['msg']['network'],
                                              "netmask": msg_dic['msg']['netmask'],
                                              "ASPath": [self.asn] + msg_dic['msg']['ASPath']
                                          }}))

        ##########
        # check if aggregation
        ##########


    def search_port(self, ip):
        port = -1
        ip_split = ip.split('.')

        i=0
        ports_list = list(self.table_original.keys())
        exit = False
        while not exit and i<len(ports_list):
            networks_of_port_list = self.table_original[ports_list[i]]
            j=0
            while not exit and j<len(networks_of_port_list):
                #apply the mask
                aux = networks_of_port_list[j]['netmask'].split('.')
                dest_masked = [int(ip_split[index]) & int(aux[index]) for index in range(4)]
                #compare with the given network
                k=0
                exit = True

                while exit and k < 4:
                    if dest_masked[k] != int(networks_of_port_list[j]['network'].split('.')[k]):
                        exit = False
                    k+=1

                if exit:
                    port = ports_list[i]

                j+=1
            i+=1

        return port  # -1 if the port is not found

    def data(self, msg_dic):
        print(self.table_original)
       
        dest = msg_dic['dst']
        dest_port = self.search_port(dest)

        print("DEST_PORT", dest_port)

        ##########
        # trivial case: no route
        ##########
        if dest_port == -1 : # port not found
            # search the port that contains the source
            src = msg_dic['src']
            src_port = self.search_port(src)

        
            self.send(self.ports_original[src_port], 
                    json.dumps({"type": "no route",
                            "src": self.our_addr(self.ports_original[src_port]),
                            "dst": msg_dic['src'],
                            "msg": {}}))

        ##########
        # trivial case: one destination found
        ##########
        else: # port found
            self.send(self.ports_original[dest_port], 
                    json.dumps({"type": "data",
                            "src": self.our_addr(self.ports_original[dest_port]),
                            "dst": msg_dic['dst'],
                            "msg": msg_dic['msg']}))

    
    def dump(self, src):
        self.send(src, 
                json.dumps({"type": "table",
                                "src": self.our_addr(src),
                                "dst": src,
                                "msg": [x for sublist in self.table_original.values() for x in sublist]})) #we need to forward a list just with the networks dict

    
    
    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                k, addr = conn.recvfrom(65535)  # k == message, addr == address where it gets it from
                srcif = None
                for sock in self.sockets:
                    if self.sockets[sock] == conn:
                        srcif = sock
                        break
                msg = k.decode('utf-8')

                msg_dic = json.loads(msg)  # msg now is a python dictionary
                print('-------------------------------------------')
                print(msg_dic["type"])

                if msg_dic["type"] == "update":
                    self.update(msg_dic)

                elif msg_dic["type"] == "data":
                    self.data(msg_dic)

                elif msg_dic["type"] == "dump":
                    self.dump(msg_dic['src'])

                else:
                    print("Operation", msg_dic["type"], "not implemented yet")


                print("Received message '%s' from %s" % (msg, srcif))
        return


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='route packets')
    parser.add_argument('asn', type=int, help="AS number of this router")
    parser.add_argument('connections', metavar='connections', type=str, nargs='+', help="connections")
    args = parser.parse_args()
    router = Router(args.asn, args.connections)
    router.run()
