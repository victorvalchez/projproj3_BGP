#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math


class Router:
    relations = {}
    sockets = {}
    ports = {}
    table = {}

    def __init__(self, asn, connections):
        print("Router at AS %s starting up" % asn)

        self.asn = asn
        for relationship in connections:
            # Neighbor == IP that ends with .2
            port, neighbor, relation = relationship.split("-")

            self.sockets[neighbor] = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sockets[neighbor].bind(('localhost', 0))
            self.ports[neighbor] = int(port)
            self.relations[neighbor] = relation
            self.send(neighbor,
                      json.dumps({"type": "handshake", "src": self.our_addr(neighbor), "dst": neighbor, "msg": {}}))

    def our_addr(self, dst):
        """Router IP address, takes the destination and changes the final 2 with a 1"""
        quads = list(int(qdn) for qdn in dst.split('.'))
        quads[3] = 1
        return "%d.%d.%d.%d" % (quads[0], quads[1], quads[2], quads[3])

    def send(self, network, message):
        self.sockets[network].sendto(message.encode('utf-8'), ('localhost', self.ports[network]))
        # I guess network is an index of the neighbor we want to send it to

    def update(self, msg_dic):
        ##########
        # Save a copy of the announcement
        ##########

        ##########
        # update forwarding table
        ##########
        if not msg_dic['src'] in self.table:
            self.table[msg_dic['src']] = {}

        key = msg_dic['msg']['network'] + msg_dic['msg']['netmask']
        self.table[msg_dic['src']][key] = msg_dic['msg']

        ##########
        # send copies of the announcement
        ##########
        for ip in self.relations:
            if ip != msg_dic['src']:  # Not updating the neighbor that has sent me the update
                # updating the neighbours depends on the relations
                if self.relations[msg_dic['src']] == 'cust' or self.relations[ip] == 'cust':
                    self.send(ip,
                              json.dumps({"type": "update",
                                          "src": self.our_addr(ip),
                                          "dst": ip,
                                          "msg": {
                                              "network": msg_dic['msg']['network'],
                                              "netmask": msg_dic['msg']['netmask'],
                                              "ASPath": [self.asn] + msg_dic['msg']['ASPath']
                                          }}))

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                k, addr = conn.recvfrom(65535)  # k == message, addr == address where it gets it from
                srcif = None
                for sock in self.sockets:
                    if self.sockets[sock] == conn:
                        srcif = sock
                        break
                msg = k.decode('utf-8')

                msg_dic = json.loads(msg)  # msg now is a python dictionary
                print('-------------------------------------------')
                print(msg_dic["type"])
                if msg_dic["type"] == "update":
                    self.update(msg_dic)

                else:
                    print("Operation", msg_dic["type"], "not implemented yet")

                print("Received message '%s' from %s" % (msg, srcif))
        return


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='route packets')
    parser.add_argument('asn', type=int, help="AS number of this router")
    parser.add_argument('connections', metavar='connections', type=str, nargs='+', help="connections")
    args = parser.parse_args()
    router = Router(args.asn, args.connections)
    router.run()
